{"version":3,"sources":["lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","setRequestHeader","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","onload","status","response","detail","window","location","href","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleBackendActionResponse","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urltweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","finalTweetList","newTweets","concat","username","apiTweetList","handledidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendResponse","onSubmit","newVal","current","value","ref","placeholder","required","TweetsComponent","setNewTweets","canTweet","tempNewTweet","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","alert","apiTweetDetail","App","Boolean","hostname","appElement","getElementById","ReactDOM","render","StrictMode","createElement","tweetsElement","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.524bb211.chunk.js","sourcesContent":["function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n    let jsonData;\n    if (data) {\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api${endpoint}`\n    xhr.responseType = 'json'\n    xhr.open(method, url)\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n    if (method === 'POST') {\n        const csrftoken = getCookie('csrftoken');\n        //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"HTTP_X_USERNAME\", 'vitostamatti')\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    }\n    xhr.onload = function () {\n        if (xhr.status === 401) {\n            const detail = xhr.response.detail\n            if (detail === \"Authentication credentials were not provided.\") {\n                window.location.href = '/login?showLoginRequired=true'\n            }\n        }\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({ \"message\": \"The request was an error\" }, 400)\n    }\n    xhr.send(jsonData)\n}\n\n","import React from 'react'\n\nimport { apiTweetAction } from './lookup'\n\nexport function ActionBtn(props) {\n    const { tweet, action, didPerformAction } = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : \"btn btn-primary btn-sm\"\n    const actionDisplay = action.display ? action.display : \"Action\"\n\n    const handleBackendActionResponse = (response, status) => {\n        console.log(response, status)\n        if ((status === 200 || status === 201) && didPerformAction) {\n            didPerformAction(response, status)\n        }\n\n    }\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleBackendActionResponse)\n\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return (\n        <button className={className} onClick={handleClick}>\n            {display}\n        </button>\n    )\n}","import { backendLookup } from '../lookup'\n\nexport function apiTweetAction(tweetId, action, callback) {\n    const data = { id: tweetId, action: action }\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport function apiTweetCreate(newTweet, callback) {\n    backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet })\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\n}\n\nexport function apiTweetList(username, callback) {\n    let endpoint = \"/tweets/\"\n    if (username) {\n        endpoint = `/tweets/?username=${username}`\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}","import React, { useState } from 'react'\n\nimport { ActionBtn } from './buttons'\n\n\nexport function ParentTweet(props) {\n    const { tweet } = props\n    return tweet.parent ? (\n        <div className='row'>\n            <div className=\"col-11 p-3 mx-auto border rounded\">\n                <p className=\"mb-0 text-muted small\">Retweeted</p>\n                <Tweet hideActions className={'  '} tweet={tweet.parent}></Tweet>\n            </div>\n        </div>\n    ) : null\n}\n\nexport function Tweet(props) {\n    const { tweet, didRetweet, hideActions } = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    const className = props.className ? props.className : 'col-11 mx-auto col-md-7'\n\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    var urltweetId = match ? match.groups.tweetid : -1\n\n    const isDetail = `${tweet.id}` === `${urltweetId}`\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200) {\n            setActionTweet(newActionTweet)\n        } else if (status === 201) {\n            if (didRetweet) {\n                didRetweet(newActionTweet)\n            }\n        }\n\n    }\n\n    return (\n        <div className={className}>\n            <div>\n                <p>{tweet.id} - {tweet.content}</p>\n                <ParentTweet tweet={tweet}></ParentTweet>\n            </div>\n            < div className=\"btn btn-group\">\n                {(actionTweet && hideActions !== true) &&\n                    <React.Fragment>\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlike\" }} />\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"retweet\", display: \"Retweet\" }} />\n                    </React.Fragment>\n                }\n                {isDetail === true ? null : <button className=\"btn btn-outline-primary\" onClick={handleLink}>View</button>}\n            </div>\n\n        </div >);\n}\n","import React, { useState, useEffect } from 'react'\nimport { apiTweetList } from './lookup'\nimport { Tweet } from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(() => {\n        //const finalTweetList = [...props.newTweet].concat(tweetsInit)\n        const finalTweetList = [...props.newTweets].concat(tweetsInit)\n        if (finalTweetList.length !== tweets.length) {\n            setTweets(finalTweetList)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            // Do lookup to database\n            const handleTweetListLookup = (response, status) => {\n                //console.log(response, status)\n                if (status === 200) {\n                    setTweetsInit(response)\n                    setTweetsDidSet(true)\n                } else {\n                    console.log(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username, handleTweetListLookup)\n        }\n\n    }, [tweetsInit, setTweetsDidSet, tweetsDidSet, props.username])\n\n    const handledidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(newTweet)\n        setTweets(updateFinalTweets)\n\n\n    }\n\n    return tweets.map((item, index) => {\n        return <Tweet\n            tweet={item}\n            didRetweet={handledidRetweet}\n            key={`${index}-${item.id}`}\n            className=\"my-2 py-2 border rounded bg-light text-dark\" />\n    })\n}","import React from 'react'\nimport { apiTweetCreate } from './lookup'\n\nexport function TweetCreate(props) {\n    const textAreaRef = React.createRef()\n    const { didTweet } = props\n\n    const handleBackendResponse = (response, status) => {\n        if (status === 201) {\n            didTweet(response)\n        } else {\n            console.log(response)\n        }\n    }\n    const handleSubmit = (event) => {\n        //backend api request\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        apiTweetCreate(newVal, handleBackendResponse)\n        textAreaRef.current.value = ''\n    }\n    return (\n        <div className={props.className}>\n            < form onSubmit={handleSubmit} >\n                <textarea ref={textAreaRef} placeholder=\"Your tweet...\" required={true} className=\"form-control\" name=\"tweet\"></textarea>\n                <button type=\"submit\" className=\"btn btn-sm btn-primary my-3\">Tweet</button>\n            </form >\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport { TweetsList } from './list'\nimport { TweetCreate } from './create'\nimport { Tweet } from './detail'\nimport { apiTweetDetail } from './lookup'\n\nexport function TweetsComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === 'false' ? false : true // converting string to boolean\n\n    const handlNewTweet = (newTweet) => {\n        //let tempNewTweet = [...newTweet]\n        let tempNewTweet = [...newTweets]\n        tempNewTweet.unshift(newTweet)\n        setNewTweets(tempNewTweet)\n    }\n    return (\n        <div className={props.className}>\n            {canTweet === true && <TweetCreate didTweet={handlNewTweet} className='col-10 mb-3 mx-auto'></TweetCreate>}\n            <TweetsList {...props} newTweets={newTweets} />\n        </div>\n    )\n}\n\nexport function TweetDetailComponent(props) {\n    const { tweetId } = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [tweet, setTweet] = useState(null)\n    const handleBackendLookup = (response, status) => {\n        if (status === 200) {\n            setTweet(response)\n        } else {\n            alert(\"There was an error finding your tweet\")\n        }\n    }\n    useEffect(() => {\n        if (didLookup === false) {\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [tweetId, didLookup, setDidLookup])\n    return (tweet === null ? null : <Tweet tweet={tweet} className={props.className}></Tweet>)\n}","import React from 'react';\nimport './App.css';\n\n\nimport { TweetsComponent } from './tweets'\n// Hooks -> useState and useEffect\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tweet Me</h1>\n\n        <div>\n          <TweetsComponent />\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetsComponent, TweetDetailComponent } from './tweets'\n\nconst appElement = document.getElementById('root')\n\nif (appElement) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appElement\n  );\n}\n\nconst e = React.createElement\n\n\nconst tweetsElement = document.getElementById('tweetme')\nif (tweetsElement) {\n  ReactDOM.render(\n    e(TweetsComponent, tweetsElement.dataset),\n    tweetsElement\n  );\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\n\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}
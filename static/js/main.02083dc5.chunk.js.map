{"version":3,"sources":["lookup/components.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","profiles/utils.js","profiles/badge.js","profiles/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/feed.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","setRequestHeader","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","onload","status","response","detail","window","location","href","indexOf","onerror","e","console","log","send","apiTweetList","username","nextUrl","undefined","replace","apiTweetFeed","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleBackendActionResponse","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","UserLink","children","UserDisplay","user","includeFullName","hideLink","nameDisplay","first_name","last_name","Fragment","UserPicture","userIdSpan","DisplayCount","numeral","format","ProfileBadge","didFollowToggle","profileLoading","currentVerb","is_following","follower_count","following_count","bio","ProfileBadgeComponent","useState","didLookup","setDidLookup","profile","setProfile","setProfileLoading","handleBackendLookup","useEffect","apiProfileDetail","toLowerCase","apiProfileFollowToggle","ParentTweet","parent","Tweet","isRetweet","retweeter","hideActions","didRetweet","actionTweet","setActionTweet","match","pathname","urltweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","finalTweetList","newTweets","concat","next","results","handledidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendResponse","onSubmit","newVal","current","value","ref","placeholder","required","TweetsFeedList","TweetsComponent","setNewTweets","canTweet","tempNewTweet","TweetDetailComponent","setTweet","alert","apiTweetDetail","App","Boolean","hostname","appElement","getElementById","ReactDOM","render","StrictMode","createElement","tweetsElement","dataset","tweetsFeedElement","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.02083dc5.chunk.js","sourcesContent":["function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n    let jsonData;\n    if (data) {\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api${endpoint}`\n    xhr.responseType = 'json'\n    xhr.open(method, url)\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n    if (method === 'POST') {\n        const csrftoken = getCookie('csrftoken');\n        //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n        //xhr.setRequestHeader(\"HTTP_X_USERNAME\", 'vitostamatti')\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    }\n    xhr.onload = function () {\n        if (xhr.status === 401) {\n            const detail = xhr.response.detail\n            if (detail === \"Authentication credentials were not provided.\") {\n                if (window.location.href.indexOf('login') === -1) {\n                    window.location.href = '/login?showLoginRequired=true'\n                }\n            }\n        }\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({ \"message\": \"The request was an error\" }, 400)\n    }\n    xhr.send(jsonData)\n}\n\n","import { backendLookup } from '../lookup'\n\nexport function apiTweetAction(tweetId, action, callback) {\n    const data = { id: tweetId, action: action }\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport function apiTweetCreate(newTweet, callback) {\n    backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet })\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\n}\n\nexport function apiTweetList(username, callback, nextUrl) {\n    let endpoint = \"/tweets/\"\n    if (username) {\n        endpoint = `/tweets/?username=${username}`\n    }\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}\n\nexport function apiTweetFeed(callback, nextUrl) {\n    let endpoint = \"/tweets/feed\"\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}\n\n","import React from 'react'\n\nimport { apiTweetAction } from './lookup'\n\nexport function ActionBtn(props) {\n    const { tweet, action, didPerformAction } = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : \"btn btn-primary btn-sm\"\n    const actionDisplay = action.display ? action.display : \"Action\"\n\n    const handleBackendActionResponse = (response, status) => {\n        console.log(response, status)\n        if ((status === 200 || status === 201) && didPerformAction) {\n            didPerformAction(response, status)\n        }\n\n    }\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleBackendActionResponse)\n\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return (\n        <button className={className} onClick={handleClick}>\n            {display}\n        </button>\n    )\n}","import React from 'react'\n\n\nexport function UserLink(props) {\n    const { username } = props\n\n    const handleUserLink = (event) => {\n        window.location.href = `/profiles/${username}`\n    }\n    return (\n        <span className=\"pointer\" onClick={handleUserLink}>\n            {props.children}\n        </span>)\n}\n\nexport function UserDisplay(props) {\n    const { user, includeFullName, hideLink } = props\n    const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null\n\n    return (\n        <React.Fragment>\n            {nameDisplay}\n            {hideLink === true ? `@${user.username}` : <UserLink username={user.username} >@{user.username}</UserLink >\n            }\n        </React.Fragment >)\n}\n\n\nexport function UserPicture(props) {\n    const { user, hideLink } = props\n    const userIdSpan = <span className=\"mx-1 px-3 py-2 rounded-circle bg-dark text-white\">{user.username[0]} </span>\n    return (\n        hideLink === true ? userIdSpan :\n            < UserLink username={user.username} >\n                {userIdSpan}\n            </UserLink >)\n}\n","import React from 'react'\nimport numeral from 'numeral'\n\n\nexport function DisplayCount(props) {\n    return <span className={props.className}>{numeral(props.children).format(\"0 a\")}</span>\n}\n","import React, { useEffect, useState } from 'react'\nimport { apiProfileDetail, apiProfileFollowToggle } from './lookup'\nimport { UserDisplay, UserPicture } from './components'\nimport { DisplayCount } from './utils'\n\n\nfunction ProfileBadge(props) {\n    const { user, didFollowToggle, profileLoading } = props\n    let currentVerb = (user && user.is_following) ? \"Unfollow\" : \"Follow\"\n    currentVerb = profileLoading ? \"Loading...\" : currentVerb\n    const handleFollowToggle = (event) => {\n        event.preventDefault()\n        if (didFollowToggle && !profileLoading) {\n            didFollowToggle(currentVerb)\n        }\n    }\n    return (user ?\n        <div>\n            <div><UserPicture user={user} hideLink></UserPicture></div>\n            <div><UserDisplay user={user} includeFullName hideLink ></UserDisplay></div>\n            <div><DisplayCount>{user.follower_count}</DisplayCount> followers</div>\n            <div><DisplayCount>{user.following_count}</DisplayCount> following</div>\n            <div>{user.location}</div>\n            <div>{user.bio}</div>\n            <button onClick={handleFollowToggle} className=\"btn btn-primary\">{currentVerb}</button>\n        </div> : null)\n\n}\n\nexport function ProfileBadgeComponent(props) {\n    const { username } = props\n    // lookup\n    const [didLookup, setDidLookup] = useState(false)\n    const [profile, setProfile] = useState(null)\n    const [profileLoading, setProfileLoading] = useState(false)\n    const handleBackendLookup = (response, status) => {\n        if (status === 200) {\n            setProfile(response)\n        }\n    }\n    useEffect(() => {\n        if (didLookup === false) {\n            apiProfileDetail(username, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [username, didLookup, setDidLookup])\n\n    const handleFollow = (action) => {\n        apiProfileFollowToggle(username, action, (response, status) => {\n            //console.log(response, status)\n            if (status === 200) {\n                setProfile(response)\n                //apiProfileDetail(username, handleBackendLookup)\n            }\n            setProfileLoading(false)\n        })\n        setProfileLoading(true)\n\n    }\n\n    return didLookup === false ? \"Loading...\" : <ProfileBadge user={profile} didFollowToggle={handleFollow} profileLoading={profileLoading}></ProfileBadge>\n}","import { backendLookup } from '../lookup'\n\nexport function apiProfileDetail(username, callback) {\n    backendLookup(\"GET\", `/profiles/${username}/`, callback)\n}\n\nexport function apiProfileFollowToggle(username, action, callback) {\n    const data = { action: `${action && action}`.toLowerCase() }\n    backendLookup(\"POST\", `/profiles/${username}/follow`, callback, data)\n}\n","import React, { useState } from 'react'\n\nimport { ActionBtn } from './buttons'\n\nimport { UserDisplay, UserPicture } from '../profiles'\n\nexport function ParentTweet(props) {\n    const { tweet } = props\n    return tweet.parent ? (<Tweet isRetweet retweeter={props.retweeter} hideActions className={'  '} tweet={tweet.parent}></Tweet>) : null\n}\n\nexport function Tweet(props) {\n    const { tweet, didRetweet, hideActions, isRetweet, retweeter } = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    let className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    className = isRetweet === true ? `${className} border rounded p-2` : className\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    var urltweetId = match ? match.groups.tweetid : -1\n\n    const isDetail = `${tweet.id}` === `${urltweetId}`\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200) {\n            setActionTweet(newActionTweet)\n        } else if (status === 201) {\n            if (didRetweet) {\n                didRetweet(newActionTweet)\n            }\n        }\n\n    }\n\n    return (\n        <div className={className}>\n            {isRetweet === true &&\n                <div className=\"mb-2\">\n                    <span className=\"small text-muted\">Retweet via <UserDisplay user={retweeter}></UserDisplay> </span>\n                </div>}\n            <div className=\"d-flex\">\n                <div className=''>\n                    <UserPicture user={tweet.user}></UserPicture>\n                </div>\n                <div className='col-11'>\n                    <div>\n                        <div>\n                            <UserDisplay user={tweet.user} includeFullName ></UserDisplay>\n                        </div>\n                        <p>{tweet.content}</p>\n                        <ParentTweet tweet={tweet} retweeter={tweet.user}></ParentTweet>\n                    </div>\n                    < div className=\"btn btn-group px-0\">\n                        {(actionTweet && hideActions !== true) &&\n                            <React.Fragment>\n                                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\n                                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlike\" }} />\n                                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"retweet\", display: \"Retweet\" }} />\n                            </React.Fragment>\n                        }\n                        {isDetail === true ? null : <button className=\"btn btn-outline-primary\" onClick={handleLink}>View</button>}\n                    </div>\n                </div>\n            </div>\n        </div >);\n}\n","import React, { useState, useEffect } from 'react'\nimport { apiTweetList } from './lookup'\nimport { Tweet } from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(() => {\n        //const finalTweetList = [...props.newTweet].concat(tweetsInit)\n        const finalTweetList = [...props.newTweets].concat(tweetsInit)\n        if (finalTweetList.length !== tweets.length) {\n            setTweets(finalTweetList)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            // Do lookup to database\n            const handleTweetListLookup = (response, status) => {\n                //console.log(response, status)\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    setTweetsInit(response.results)\n                    setTweetsDidSet(true)\n                } else {\n                    console.log(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username, handleTweetListLookup)\n        }\n\n    }, [tweetsInit, setTweetsDidSet, tweetsDidSet, props.username])\n\n    const handledidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(newTweet)\n        setTweets(updateFinalTweets)\n    }\n\n    const handleLoadNext = (event) => {\n        event.preventDefault()\n        if (nextUrl !== null) {\n            const handleLoadNextResponse = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    const newTweets = [...tweets].concat(response.results)\n                    setTweetsInit(newTweets)\n                    setTweets(newTweets)\n                } else {\n                    console.log(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username, handleLoadNextResponse, nextUrl)\n        }\n    }\n    return <React.Fragment>{\n        tweets.map((item, index) => {\n            return <Tweet\n                tweet={item}\n                didRetweet={handledidRetweet}\n                key={`${index}-${item.id}`}\n                className=\"mx-auto my-2 p-3 border rounded bg-light text-dark\" />\n        })}\n        {nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load More Tweets</button>}\n    </React.Fragment>\n}","import React from 'react'\nimport { apiTweetCreate } from './lookup'\n\nexport function TweetCreate(props) {\n    const textAreaRef = React.createRef()\n    const { didTweet } = props\n\n    const handleBackendResponse = (response, status) => {\n        if (status === 201) {\n            didTweet(response)\n        } else {\n            console.log(response)\n        }\n    }\n    const handleSubmit = (event) => {\n        //backend api request\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        apiTweetCreate(newVal, handleBackendResponse)\n        textAreaRef.current.value = ''\n    }\n    return (\n        <div className={props.className}>\n            < form onSubmit={handleSubmit} >\n                <textarea ref={textAreaRef} placeholder=\"Your tweet...\" required={true} className=\"form-control\" name=\"tweet\"></textarea>\n                <button type=\"submit\" className=\"btn btn-sm btn-primary my-3\">Tweet</button>\n            </form >\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport { apiTweetFeed } from './lookup'\nimport { Tweet } from './detail'\n\nexport function TweetsFeedList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(() => {\n        //const finalTweetList = [...props.newTweet].concat(tweetsInit)\n        const finalTweetList = [...props.newTweets].concat(tweetsInit)\n        if (finalTweetList.length !== tweets.length) {\n            setTweets(finalTweetList)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            // Do lookup to database\n            const handleTweetListLookup = (response, status) => {\n                //console.log(response, status)\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    setTweetsInit(response.results)\n                    setTweetsDidSet(true)\n                } else {\n                    console.log(\"There was an error\")\n                }\n            }\n            apiTweetFeed(handleTweetListLookup)\n        }\n\n    }, [tweetsInit, setTweetsDidSet, tweetsDidSet, props.username])\n\n    const handledidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(newTweet)\n        setTweets(updateFinalTweets)\n    }\n\n    const handleLoadNext = (event) => {\n        event.preventDefault()\n        if (nextUrl !== null) {\n            const handleLoadNextResponse = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    const newTweets = [...tweets].concat(response.results)\n                    setTweetsInit(newTweets)\n                    setTweets(newTweets)\n                } else {\n                    console.log(\"There was an error\")\n                }\n            }\n            apiTweetFeed(handleLoadNextResponse, nextUrl)\n        }\n    }\n    return <React.Fragment>{\n        tweets.map((item, index) => {\n            return <Tweet\n                tweet={item}\n                didRetweet={handledidRetweet}\n                key={`${index}-${item.id}`}\n                className=\"mx-auto my-2 p-3 border rounded bg-light text-dark\" />\n        })}\n        {nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load More Tweets</button>}\n    </React.Fragment>\n}","import React, { useState, useEffect } from 'react'\nimport { TweetsList } from './list'\nimport { TweetsFeedList } from './feed'\nimport { TweetCreate } from './create'\nimport { Tweet } from './detail'\nimport { apiTweetDetail } from './lookup'\n\nexport function FeedComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === 'false' ? false : true // converting string to boolean\n\n    const handlNewTweet = (newTweet) => {\n        //let tempNewTweet = [...newTweet]\n        let tempNewTweet = [...newTweets]\n        tempNewTweet.unshift(newTweet)\n        setNewTweets(tempNewTweet)\n    }\n    return (\n        <div className={props.className}>\n            {canTweet === true && <TweetCreate didTweet={handlNewTweet} className='col-10 mb-3 mx-auto'></TweetCreate>}\n            <TweetsFeedList {...props} newTweets={newTweets} />\n        </div>\n    )\n}\n\nexport function TweetsComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === 'false' ? false : true // converting string to boolean\n\n    const handlNewTweet = (newTweet) => {\n        //let tempNewTweet = [...newTweet]\n        let tempNewTweet = [...newTweets]\n        tempNewTweet.unshift(newTweet)\n        setNewTweets(tempNewTweet)\n    }\n    return (\n        <div className={props.className}>\n            {canTweet === true && <TweetCreate didTweet={handlNewTweet} className='col-10 mb-3 mx-auto'></TweetCreate>}\n            <TweetsList {...props} newTweets={newTweets} />\n        </div>\n    )\n}\n\nexport function TweetDetailComponent(props) {\n    const { tweetId } = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [tweet, setTweet] = useState(null)\n    const handleBackendLookup = (response, status) => {\n        if (status === 200) {\n            setTweet(response)\n        } else {\n            alert(\"There was an error finding your tweet\")\n        }\n    }\n    useEffect(() => {\n        if (didLookup === false) {\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [tweetId, didLookup, setDidLookup])\n    return (tweet === null ? null : <Tweet tweet={tweet} className={props.className}></Tweet>)\n}","import React from 'react';\nimport './App.css';\n\n\nimport { TweetsComponent } from './tweets'\n// Hooks -> useState and useEffect\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tweet Me</h1>\n\n        <div>\n          <TweetsComponent />\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ProfileBadgeComponent } from './profiles'\nimport { FeedComponent, TweetsComponent, TweetDetailComponent } from './tweets'\n\nconst appElement = document.getElementById('root')\n\nif (appElement) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appElement\n  );\n}\n\nconst e = React.createElement\n\nconst tweetsElement = document.getElementById('tweetme')\nif (tweetsElement) {\n  ReactDOM.render(\n    e(TweetsComponent, tweetsElement.dataset), tweetsElement);\n}\n\nconst tweetsFeedElement = document.getElementById('tweetme-feed')\nif (tweetsFeedElement) {\n  ReactDOM.render(\n    e(FeedComponent, tweetsFeedElement.dataset), tweetsFeedElement);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\n\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container\n  );\n})\n\nconst userProfileBadgeElements = document.querySelectorAll(\".tweetme-profile-badge\")\n\nuserProfileBadgeElements.forEach(container => {\n  ReactDOM.render(\n    e(ProfileBadgeComponent, container.dataset),\n    container\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}
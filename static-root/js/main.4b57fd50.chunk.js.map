{"version":3,"sources":["tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweet","setNewTweet","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweet","unshift","content","likes","id","console","log","ref","placeholder","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","finalTweetList","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","Boolean","window","location","hostname","match","appElement","document","getElementById","ReactDOM","render","StrictMode","tweetsElement","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b57fd50.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { loadTweets } from '../lookup'\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweet, setNewTweet] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweet = [...newTweet]\n        // change this to a serverside call\n        tempNewTweet.unshift({\n            content: newVal,\n            likes: 0,\n            id: 999,\n        })\n        setNewTweet(tempNewTweet)\n        console.log(newVal)\n        textAreaRef.current.value = ''\n    }\n    return (\n        <div className={props.className}>\n            <div className=\"col-10 mb-3 mx-auto\">\n                <form onSubmit={handleSubmit}>\n                    <textarea ref={textAreaRef} placeholder=\"Your tweet...\" required={true} className=\"form-control\" name=\"tweet\"></textarea>\n                    <button type=\"submit\" className=\"btn btn-sm btn-primary my-3\">Tweet</button>\n                </form>\n            </div>\n            <TweetsList newTweet={newTweet} />\n        </div>\n    )\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n\n    useEffect(() => {\n        const finalTweetList = [...props.newTweet].concat(tweetsInit)\n        if (finalTweetList.length !== tweets.length) {\n            setTweets(finalTweetList)\n        }\n    }, [props.newTweet, tweets, tweetsInit])\n\n    useEffect(() => {\n        // Do lookup to database\n        const myCallback = (response, status) => {\n            //console.log(response, status)\n            if (status === 200) {\n                setTweetsInit(response)\n            }\n        }\n        loadTweets(myCallback)\n    }, [])\n    return tweets.map((item, index) => {\n        return <Tweet tweet={item} key={`${index}-${item.id}`} className=\"my-2 py-2 border rounded bg-light text-dark\" />\n    })\n}\n\nexport function ActionBtn(props) {\n    const { tweet, action } = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : \"btn btn-primary btn-sm\"\n    const actionDisplay = action.display ? action.display : \"Action\"\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === \"like\") {\n            if (userLike === true) {\n                setUserLike(false)\n                setLikes(likes - 1)\n            } else {\n                setLikes(likes + 1)\n                setUserLike(true)\n            }\n\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return (\n        <button className={className} onClick={handleClick}>\n            {display}\n        </button>\n    )\n}\n\nexport function Tweet(props) {\n    const { tweet } = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-7'\n    return (\n        <div className={className}>\n            <p>{tweet.id} - {tweet.content}</p>\n            <div className=\"btn btn-group\">\n                <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"Likes\" }} />\n                <ActionBtn tweet={tweet} action={{ type: \"retweet\", display: \"Retweet\" }} />\n            </div>\n        </div>);\n}\n","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://localhost:8000/api/tweets/'\n    const responseType = 'json'\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({ \"message\": \"The request was an error\" }, 400)\n    }\n    xhr.send()\n}","import React from 'react';\nimport './App.css';\n\n\nimport { TweetsComponent } from './tweets'\n// Hooks -> useState and useEffect\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tweet Me</h1>\n\n        <div>\n          <TweetsComponent />\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetsComponent } from './tweets'\n\nconst appElement = document.getElementById('root')\n\nif (appElement) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appElement\n  );\n}\n\nconst tweetsElement = document.getElementById('tweetme')\nif (tweetsElement) {\n  ReactDOM.render(\n    <TweetsComponent />,\n    tweetsElement\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}